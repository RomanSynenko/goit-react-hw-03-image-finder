{"ast":null,"code":"var _jsxFileName = \"/Users/synenkoroman/Documents/GitHub/goit-react-hw-03-image-finder/src/Components/ModalWindow/ModalWindow.js\";\nimport React, { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport s from './Modal.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst modalRoot = document.querySelector('#modal-root');\n\nclass ModalWindow extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleKeyDown = e => {\n      if (e.code === 'Escape') {\n        this.props.onCloseModal();\n      }\n    };\n\n    this.handleBackdropClick = event => {\n      if (event.currentTarget === event.target) {\n        this.props.onCloseModal();\n      }\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  render() {\n    return /*#__PURE__*/createPortal( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.Overlay,\n      onClick: this.handleBackdropClick,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: s.Modal,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: this.props.largeImg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), modalRoot);\n  }\n\n}\n\nModalWindow.propTypes = {\n  largeImg: PropTypes.string.isRequired\n};\nexport default ModalWindow;","map":{"version":3,"sources":["/Users/synenkoroman/Documents/GitHub/goit-react-hw-03-image-finder/src/Components/ModalWindow/ModalWindow.js"],"names":["React","Component","createPortal","PropTypes","s","modalRoot","document","querySelector","ModalWindow","handleKeyDown","e","code","props","onCloseModal","handleBackdropClick","event","currentTarget","target","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","render","Overlay","Modal","largeImg","propTypes","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,CAAP,MAAc,qBAAd;;AAEA,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,aAAvB,CAAlB;;AAEA,MAAMC,WAAN,SAA0BP,SAA1B,CAAoC;AAAA;AAAA;;AAAA,SAQhCQ,aARgC,GAQhBC,CAAC,IAAI;AACjB,UAAIA,CAAC,CAACC,IAAF,KAAW,QAAf,EAAyB;AACrB,aAAKC,KAAL,CAAWC,YAAX;AACH;AACJ,KAZ+B;;AAAA,SAahCC,mBAbgC,GAaVC,KAAK,IAAI;AAC3B,UAAIA,KAAK,CAACC,aAAN,KAAwBD,KAAK,CAACE,MAAlC,EAA0C;AACtC,aAAKL,KAAL,CAAWC,YAAX;AACH;AACJ,KAjB+B;AAAA;;AAChCK,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,KAAKX,aAAxC;AACH;;AAEDY,EAAAA,oBAAoB,GAAG;AACnBF,IAAAA,MAAM,CAACG,mBAAP,CAA2B,SAA3B,EAAsC,KAAKb,aAA3C;AACH;;AAWDc,EAAAA,MAAM,GAAG;AACL,wBAAOrB,YAAY,eACf;AAAK,MAAA,SAAS,EAAEE,CAAC,CAACoB,OAAlB;AAA2B,MAAA,OAAO,EAAE,KAAKV,mBAAzC;AAAA,6BACI;AAAK,QAAA,SAAS,EAAEV,CAAC,CAACqB,KAAlB;AAAA,+BACI;AAAK,UAAA,GAAG,EAAE,KAAKb,KAAL,CAAWc;AAArB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADe,EAMfrB,SANe,CAAnB;AAQH;;AA3B+B;;AA6BpCG,WAAW,CAACmB,SAAZ,GAAwB;AACpBD,EAAAA,QAAQ,EAAEvB,SAAS,CAACyB,MAAV,CAAiBC;AADP,CAAxB;AAGA,eAAerB,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\n\nimport s from './Modal.module.scss'\n\nconst modalRoot = document.querySelector('#modal-root');\n\nclass ModalWindow extends Component {\n    componentDidMount() {\n        window.addEventListener('keydown', this.handleKeyDown);\n    };\n\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.handleKeyDown);\n    };\n    handleKeyDown = e => {\n        if (e.code === 'Escape') {\n            this.props.onCloseModal();\n        }\n    };\n    handleBackdropClick = event => {\n        if (event.currentTarget === event.target) {\n            this.props.onCloseModal();\n        }\n    };\n    render() {\n        return createPortal(\n            <div className={s.Overlay} onClick={this.handleBackdropClick}>\n                <div className={s.Modal}>\n                    <img src={this.props.largeImg} />\n                </div>\n            </div>,\n            modalRoot,\n        );\n    }\n}\nModalWindow.propTypes = {\n    largeImg: PropTypes.string.isRequired,\n};\nexport default ModalWindow;"]},"metadata":{},"sourceType":"module"}